#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №10. Доставка сообщений до Команды.

**Цель:** Предоставить возможность обмена данными для длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Отправлять сообщения длительной операции.

## Задание.
Поскольку длительная операция выполняется в течение некоторого момента времени, то может возникнуть необходимость
в предоставлении дополнительной информации, влияющей на ход выполнения. Поскольку Команды и источник данных часто находятся в разных потоках,
то сделать это надо потоко-безопасным образом. Самый простой способ - используя идиому Производитель-Поребитель, в нашем случае - очередь.

Набор данных, предназначенных для Команды будем называть сообщением. Можно использовать любую подходящую конструкцию языка программирования для 
представления сообщения. Необходимо учесть, что скорость доставки сообщений может быть выше, чем скорость обработки, а значит очередь сообщений должна быть
у каждой Длительной операции. При этом потоко-безопасные очереди требуют системных ресурсов, а значит, чтобы не получить ограничение на максимальное количество
одновремнно работающих длительных Команд, нельзя использовать потоко-безопасные очереди. 

Возможный вариант реализации - оставить одну потоко-безопасную очередь для потока, а для Команд использовать обычные очереди. Осталось только решить, как сообщение
излеченное из очереди потока попадет в очередь Команды. Один из возможных вариантов:
1. Каждая команда имеет уникальный идентификатор.
2. Сообщение содержит уникальный идентификатор Команлды, которому оно адресовано.
3. Для потока создаем специальную Длительную Команду, которая назвается Роутером. Он хранит коллекцию пар (id Команды, ссылка на очередь Команды). При вызове метода Execute этой 
Роутера, если очередь потока не пуста, происходит чтение очередного сообщения и по id Команды определяется очередь, куда это сообщение записывается.
Если id Команды не определен, на консоль выводится сообщение о невозможности доставить сообщение неизвестному адресату.
При старте новой Команды, ее очередь необходимо добавить в коллекцию Роутера. При остановке Команды - очередь удаляется из коллекции Роутера.

Продемонстрировать работу Роутера на двух Длительных Командах и на отправке сообщения несуществующей Команде.

**Материалы для самостоятельного изучения**.
1. [Паттерн Сообщение](https://www.enterpriseintegrationpatterns.com/patterns/messaging/Message.html)
2. [Паттерн Роутер - весь раздел про Роутеры](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageRoutingIntro.html)
3. [Обмен сообщеними](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageConstructionIntro.html)

#!markdown

#!csharp

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

public class Message
{
    public string Content { get; }
    public Guid CommandId { get; }

    public Message(string content, Guid commandId)
    {
        Content = content;
        CommandId = commandId;
    }
}

public class Command
{
    private readonly ConcurrentQueue<Message> _messageQueue = new ConcurrentQueue<Message>();
    private readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();

    public Guid Id { get; }

    public Command()
    {
        Id = Guid.NewGuid();
    }

    public void Start()
    {
        Task.Run(() =>
        {
            while (!_cancellationTokenSource.IsCancellationRequested)
            {
                if (_messageQueue.TryDequeue(out var message))
                {
                    Console.WriteLine($"Команда {Id} получила сообщение: {message.Content}");
                }
                else
                {
                    Thread.Sleep(100);
                }
            }
        });
    }

    public void Stop()
    {
        _cancellationTokenSource.Cancel();
    }

    public void EnqueueMessage(Message message)
    {
        _messageQueue.Enqueue(message);
    }
}

public class Router
{
    private readonly ConcurrentDictionary<Guid, Command> _commandDictionary = new ConcurrentDictionary<Guid, Command>();
    private readonly ConcurrentQueue<Message> _messageQueue = new ConcurrentQueue<Message>();
    private readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();

    public void Start()
    {
        Task.Run(() =>
        {
            while (!_cancellationTokenSource.IsCancellationRequested)
            {
                if (_messageQueue.TryDequeue(out var message))
                {
                    if (_commandDictionary.TryGetValue(message.CommandId, out var command))
                    {
                        command.EnqueueMessage(message);
                    }
                    else
                    {
                        Console.WriteLine($"Не удается доставить сообщение неизвестному получателю: {message.Content}");
                    }
                }
                else
                {
                    Thread.Sleep(100);
                }
            }
        });
    }

    public void Stop()
    {
        _cancellationTokenSource.Cancel();
    }

    public void RegisterCommand(Command command)
    {
        _commandDictionary.TryAdd(command.Id, command);
    }

    public void UnregisterCommand(Command command)
    {
        _commandDictionary.TryRemove(command.Id, out _);
    }

    public void EnqueueMessage(Message message)
    {
        _messageQueue.Enqueue(message);
    }
}
var router = new Router();
        router.Start();

        var command1 = new Command();
        var command2 = new Command();

        router.RegisterCommand(command1);
        router.RegisterCommand(command2);

        command1.Start();
        command2.Start();

        router.EnqueueMessage(new Message("Команда 1", command1.Id));
        router.EnqueueMessage(new Message("Команда 2", command2.Id));
        router.EnqueueMessage(new Message("Неизвестная команда", Guid.NewGuid()));

        Thread.Sleep(1000);

        command1.Stop();
        command2.Stop();
        router.Stop();
